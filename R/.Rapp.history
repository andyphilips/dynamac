?summary
library(MASS)#
library(lmtest)
source("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/R/dynardl.R")
beta.x <- 2 # coef on x#
beta.lx <- -3 # coef on l.x#
phi <- 0.5 # coef on ldv#
const <- 2.5 # constant needed to have a value of mean.y#
mean.y <- const/(1-phi) # steady-state of Y#
#
set.seed(100)#
x.full <- rnorm(500)#
y.full <- rep(NA, length(x.full))#
#
y.full[1] <- const/1-phi#
#
for(i in 2:length(x.full)) {#
#	y.full[i] <- const*rnorm(1, 1, 0.05) + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, 0.05)#
  y.full[i] <- const + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, 2)#
}#
#
# Trim the burn in#
x <- x.full[101:500]#
y <- y.full[101:500]#
#
par(mfrow = c(2, 1))#
plot(y)#
plot(x)#
dev.off()#
#
set.seed(1)#
model <- dynardl(y ~ x, lags = list("x" = c(1)), levels = c("x"), #
	simulate = TRUE, fullsims = TRUE, #
	shockvar = "x",#
	sims = 10000, range = 20,#
	ec = FALSE)
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.abs.diffs")
beta.x <- 2 # coef on x#
beta.lx <- -3 # coef on l.x#
phi <- 0.5 # coef on ldv#
const <- 2.5 # constant needed to have a value of mean.y#
mean.y <- const/(1-phi) # steady-state of Y#
#
set.seed(100)#
x.full <- rnorm(500)#
y.full <- rep(NA, length(x.full))#
#
y.full[1] <- const/1-phi#
#
for(i in 2:length(x.full)) {#
#	y.full[i] <- const*rnorm(1, 1, 0.05) + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, 0.05)#
  y.full[i] <- const + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, .1)#
}#
#
# Trim the burn in#
x <- x.full[101:500]#
y <- y.full[101:500]#
#
par(mfrow = c(2, 1))#
plot(y)#
plot(x)#
dev.off()#
#
set.seed(1)#
model <- dynardl(y ~ x, lags = list("x" = c(1)), levels = c("x"), #
	simulate = TRUE, fullsims = TRUE, #
	shockvar = "x",#
	sims = 10000, range = 20,#
	ec = FALSE)
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.abs.diffs")
dynardl.all.plots(model, bw = TRUE)
load("~/Dropbox/Dynpss Project/R/dynamac/data/ineq.rda")
load("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/R/dynamac/data/ineq.rda")
res4.neg <- dynardl(concern ~ incshare10, data = ineq, #
	lags = list("concern" = 1, "incshare10" = c(1)),#
	diffs = "incshare10",#
	ec = TRUE, range = 40,#
	lagdiffs = list("concern" = c(1:5), "incshare10" = c(1:5)), #
	simulate = TRUE, shockvar = "incshare10", #
	shockval = -0.5, qoi = "median",#
	fullsims = TRUE)
dynardl.simulation.plot(res4.neg, type = "area", response = "cumulative.abs.diffs", start.period = 5, last.period = 30)
dynardl.simulation.plot(res4.neg, type = "area", response = "cumulative.diffs", start.period = 5, last.period = 30)
dynardl.simulation.plot(res4.neg, type = "area", response = "cumulative.abs.diffs", start.period = 5)
x <- res4.neg
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Two matrices: one for the diffs of the raw simulations (by simulation), the other for cumulative#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- cum.diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		dd.ll95 <- dd.ul95 <- dd.ll90 <- dd.ul90 <- dd.ll75 <- dd.ul75 <- dd.central <- rep(NA, ncol(cum.diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(cum.diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { #
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
						temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
					} else {#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
						temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
						temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))		#
					}#
				} else {#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
				}#
			}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Two matrices: one for the diffs of the raw simulations (by simulation), the other for cumulative#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- cum.diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		dd.ll95 <- dd.ul95 <- dd.ll90 <- dd.ul90 <- dd.ll75 <- dd.ul75 <- dd.central <- rep(NA, ncol(cum.diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(cum.diff.sims))
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Two matrices: one for the diffs of the raw simulations (by simulation), the other for cumulative#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- cum.diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		dd.ll95 <- dd.ul95 <- dd.ll90 <- dd.ul90 <- dd.ll75 <- dd.ul75 <- dd.central <- rep(NA, ncol(cum.diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(cum.diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { #
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
						temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
					} else {#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
						temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
						temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))		#
					}#
				} else {#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
				}#
			}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}
time <- seq(start.period, (ncol(cum.diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			lines(time, d.central, lty = 2, lwd = 3)
xlab <- ylab <- ""#
		bw <- TRUE
time <- seq(start.period, (ncol(cum.diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			lines(time, d.central, lty = 2, lwd = 3)
temp.ll95
temp.ul75
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Two matrices: one for the diffs of the raw simulations (by simulation), the other for cumulative#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- cum.diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		dd.ll95 <- dd.ul95 <- dd.ll90 <- dd.ul90 <- dd.ll75 <- dd.ul75 <- dd.central <- rep(NA, ncol(cum.diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(cum.diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { #
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ll95[i] <- temp.ll95[i-1] - abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
						temp.ll75[i] <- temp.ll75[i-1] - abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
					} else {#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
						temp.ll75[i] <- temp.ll75[i-1] - abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
						temp.ll95[i] <- temp.ll95[i-1] - abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))		#
					}#
				} else {#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
				}#
			}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}
time <- seq(start.period, (ncol(cum.diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			lines(time, d.central, lty = 2, lwd = 3)
dynardl.simulation.plot(res4.neg, type = "area", response = "cumulative.diffs", start.period = 5, last.period = 30)
dynardl.simulation.plot(res4.neg, type = "spike", response = "levels", bw = TRUE, tol = 0.000001)
dynardl.simulation.plot(res4.neg, type = "area", response = "cumulative.abs.diffs", start.period = 5)
time <- seq(start.period, (ncol(cum.diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			lines(time, d.central, lty = 2, lwd = 3)
# Series simulator to make pretty pictures from dynardl#
library(dynamac)#
#
beta.x <- 2 # coef on x#
beta.lx <- -3 # coef on l.x#
phi <- 0.5 # coef on ldv#
const <- 2.5 # constant needed to have a value of mean.y#
mean.y <- const/(1-phi) # steady-state of Y#
#
set.seed(100)#
x.full <- rnorm(500)#
y.full <- rep(NA, length(x.full))#
#
y.full[1] <- const/1-phi#
#
for(i in 2:length(x.full)) {#
#	y.full[i] <- const*rnorm(1, 1, 0.05) + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, 0.05)#
  y.full[i] <- const + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, .1)#
}#
#
# Trim the burn in#
x <- x.full[101:500]#
y <- y.full[101:500]#
#
par(mfrow = c(2, 1))#
plot(y)#
plot(x)#
dev.off()#
#
set.seed(1)#
model <- dynardl(y ~ x, lags = list("x" = c(1)), levels = c("x"), #
	simulate = TRUE, fullsims = TRUE, #
	shockvar = "x",#
	sims = 10000, range = 20,#
	ec = FALSE)
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Two matrices: one for the diffs of the raw simulations (by simulation), the other for cumulative#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- cum.diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		dd.ll95 <- dd.ul95 <- dd.ll90 <- dd.ul90 <- dd.ll75 <- dd.ul75 <- dd.central <- rep(NA, ncol(cum.diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(cum.diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { #
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ll95[i] <- temp.ll95[i-1] - abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
						temp.ll75[i] <- temp.ll75[i-1] - abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
					} else {#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
						temp.ll75[i] <- temp.ll75[i-1] - abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
						temp.ll95[i] <- temp.ll95[i-1] - abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))		#
					}#
				} else {#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
				}#
			}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}
start.period <- 1#
is.changing <- 15#
x <- model#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Two matrices: one for the diffs of the raw simulations (by simulation), the other for cumulative#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- cum.diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		dd.ll95 <- dd.ul95 <- dd.ll90 <- dd.ul90 <- dd.ll75 <- dd.ul75 <- dd.central <- rep(NA, ncol(cum.diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(cum.diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { #
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ll95[i] <- temp.ll95[i-1] - abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
						temp.ll75[i] <- temp.ll75[i-1] - abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
					} else {#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
						temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
						temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
						temp.ll75[i] <- temp.ll75[i-1] - abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
						temp.ll90[i] <- temp.ll90[i-1] - abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
						temp.ll95[i] <- temp.ll95[i-1] - abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))		#
					}#
				} else {#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
				}#
			}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		plot(d.central, type = "l")#
		xlab <- ylab <- ""#
		bw <- TRUE#
		time <- seq(start.period, (ncol(cum.diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			lines(time, d.central, lty = 2, lwd = 3)
a
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			lines(time, d.central, lty = 2, lwd = 3)
temp.ll95
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "none"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "none"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(type != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
a#
#
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(type != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
abs.errors
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- temp.ll75[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
diffs.ims
diff.sims
i <- 10
quantile(diff.sims[,i], 0.025, na.rm = T)*(-1)
(quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])
temp.central[i]
i <- 11
quantile(diff.sims[,i], 0.025, na.rm = T)*(-1)
quantile(diff.sims[,i], 0.025, na.rm = T)
quantile(diff.sims[,i], 0.975, na.rm = T)
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] - abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] - abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] - abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] - abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
i <- 10
quantile(diff.sims[,i], 0.025, na.rm = T)
quantile(diff.sims[,i]
quantile(diff.sims[,i], 0.875, na.rm = T)
quantile(diff.sims[,i], 0.125, na.rm = T)
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] + abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] + abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] + abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] - abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] - abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] - abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
res4.neg <- dynardl(concern ~ incshare10, data = ineq, #
	lags = list("concern" = 1, "incshare10" = c(1)),#
	diffs = "incshare10",#
	ec = TRUE, range = 40,#
	lagdiffs = list("concern" = c(1:5), "incshare10" = c(1:5)), #
	simulate = TRUE, shockvar = "incshare10", #
	shockval = -0.5, qoi = "median",#
	fullsims = TRUE)
a <- res4.neg#
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
dynardl.simulation.plot(res4.neg, type = "spike", response = "levels", bw = TRUE, tol = 0.000001)
x <- res4.neg#
start.period <- 1#
is.changing <- 15#
x <- model#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
beta.x <- 2 # coef on x#
beta.lx <- -3 # coef on l.x#
phi <- 0.5 # coef on ldv#
const <- 2.5 # constant needed to have a value of mean.y#
mean.y <- const/(1-phi) # steady-state of Y#
#
set.seed(100)#
x.full <- rnorm(500)#
y.full <- rep(NA, length(x.full))#
#
y.full[1] <- const/1-phi#
#
for(i in 2:length(x.full)) {#
#	y.full[i] <- const*rnorm(1, 1, 0.05) + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, 0.05)#
  y.full[i] <- const + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, 2)#
}#
#
# Trim the burn in#
x <- x.full[101:500]#
y <- y.full[101:500]#
#
par(mfrow = c(2, 1))#
plot(y)#
plot(x)#
dev.off()#
#
set.seed(1)#
model <- dynardl(y ~ x, lags = list("x" = c(1)), levels = c("x"), #
	simulate = TRUE, fullsims = TRUE, #
	shockvar = "x",#
	sims = 10000, range = 20,#
	ec = FALSE)
start.period <- 1#
is.changing <- 15#
x <- model#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- model#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- model#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
i <- 10
quantile(diff.sims[,i], 0.025, na.rm = T)
temp.central[i]
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						# if(abs.errors == "cumulate") {#
							# temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							# temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							# temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							# temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							# temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							# temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						# } else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						# # if(abs.errors == "cumulate") {#
							# # temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							# # temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							# # temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							# # temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							# # temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							# # temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						# } else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			if(abs.errors == "cumulate") {#
				d.ll95[i] <- sum(temp.ll95[1:i], na.rm = T)#
				d.ll90[i] <- sum(temp.ll90[1:i], na.rm = T)#
				d.ll75[i] <- sum(temp.ll75[1:i], na.rm = T)#
				d.ul75[i] <- sum(temp.ul75[1:i], na.rm = T)#
				d.ul90[i] <- sum(temp.ul90[1:i], na.rm = T)#
				d.ul95[i] <- sum(temp.ul95[1:i], na.rm = T)#
			} else {#
				d.ll95[i] <- temp.ll95[i] #
				d.ll90[i] <- temp.ll90[i] #
				d.ll75[i] <- temp.ll75[i] #
				d.ul75[i] <- temp.ul75[i] #
				d.ul90[i] <- temp.ul90[i] #
				d.ul95[i] <- temp.ul95[i]#
			}#
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						# if(abs.errors == "cumulate") {#
							# temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							# temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							# temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							# temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							# temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							# temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						# } else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						#}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						# # if(abs.errors == "cumulate") {#
							# # temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							# # temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							# # temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							# # temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							# # temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							# # temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						# } else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						#}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			if(abs.errors == "cumulate") {#
				d.ll95[i] <- sum(temp.ll95[1:i], na.rm = T)#
				d.ll90[i] <- sum(temp.ll90[1:i], na.rm = T)#
				d.ll75[i] <- sum(temp.ll75[1:i], na.rm = T)#
				d.ul75[i] <- sum(temp.ul75[1:i], na.rm = T)#
				d.ul90[i] <- sum(temp.ul90[1:i], na.rm = T)#
				d.ul95[i] <- sum(temp.ul95[1:i], na.rm = T)#
			} else {#
				d.ll95[i] <- temp.ll95[i] #
				d.ll90[i] <- temp.ll90[i] #
				d.ll75[i] <- temp.ll75[i] #
				d.ul75[i] <- temp.ul75[i] #
				d.ul90[i] <- temp.ul90[i] #
				d.ul95[i] <- temp.ul95[i]#
			}#
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						# if(abs.errors == "cumulate") {#
							# temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.025, na.rm = T))#
							# temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.050, na.rm = T))#
							# temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.125, na.rm = T))#
							# temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							# temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							# temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						# } else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						#}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						# # if(abs.errors == "cumulate") {#
							# # temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							# # temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							# # temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							# # temp.ll75[i] <- temp.ll75[i-1] + abs(quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							# # temp.ll90[i] <- temp.ll90[i-1] + abs(quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							# # temp.ll95[i] <- temp.ll95[i-1] + abs(quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						# } else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						#}#
					}#
				} else { # if it's not moving, by tol or last.period#
						#temp.ll95[i] <- temp.ll95[i - 1]#
						#temp.ll90[i] <- temp.ll90[i - 1]#
						#temp.ll75[i] <- temp.ll75[i - 1]#
						#temp.ul75[i] <- temp.ul75[i - 1]#
						#temp.ul90[i] <- temp.ul90[i - 1]#
						#temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			if(abs.errors == "cumulate") {#
				d.ll95[i] <- sum(temp.ll95[1:i], na.rm = T)#
				d.ll90[i] <- sum(temp.ll90[1:i], na.rm = T)#
				d.ll75[i] <- sum(temp.ll75[1:i], na.rm = T)#
				d.ul75[i] <- sum(temp.ul75[1:i], na.rm = T)#
				d.ul90[i] <- sum(temp.ul90[1:i], na.rm = T)#
				d.ul95[i] <- sum(temp.ul95[1:i], na.rm = T)#
			} else {#
				d.ll95[i] <- temp.ll95[i] #
				d.ll90[i] <- temp.ll90[i] #
				d.ll75[i] <- temp.ll75[i] #
				d.ul75[i] <- temp.ul75[i] #
				d.ul90[i] <- temp.ul90[i] #
				d.ul95[i] <- temp.ul95[i]#
			}#
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- model#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- model#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
				d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
# Series simulator to make pretty pictures from dynardl#
library(dynamac)#
#
beta.x <- 2 # coef on x#
beta.lx <- -3 # coef on l.x#
phi <- 0.5 # coef on ldv#
const <- 2.5 # constant needed to have a value of mean.y#
mean.y <- const/(1-phi) # steady-state of Y#
#
set.seed(100)#
x.full <- rnorm(500)#
y.full <- rep(NA, length(x.full))#
#
y.full[1] <- const/1-phi#
#
for(i in 2:length(x.full)) {#
#	y.full[i] <- const*rnorm(1, 1, 0.05) + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, 0.05)#
  y.full[i] <- const + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, .5)#
}#
#
# Trim the burn in#
x <- x.full[101:500]#
y <- y.full[101:500]#
#
par(mfrow = c(2, 1))#
plot(y)#
plot(x)#
dev.off()#
#
set.seed(1)#
model <- dynardl(y ~ x, lags = list("x" = c(1)), levels = c("x"), #
	simulate = TRUE, fullsims = TRUE, #
	shockvar = "x",#
	sims = 10000, range = 20,#
	ec = FALSE)#
summary(model)#
#
### What follows are 14 plots: dynardl.all.plots, then the six separately, as .pdf and .png#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/levelsallplots.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.all.plots(model, bw = TRUE)#
dev.off()#
#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/levelofy.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "levels")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/changeofy.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "diffs")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/levelfrommean.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "levels.from.mean")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/cumchange.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.diffs")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/cumabschange.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.abs.diffs")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/shockeffectdecay.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "shock.effect.decay")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/levelsallplots.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.all.plots(model, bw = TRUE)#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/levelofy.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "levels")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/changeofy.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "diffs")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/levelfrommean.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "levels.from.mean")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/cumchange.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.diffs")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/cumabschange.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.abs.diffs")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/shockeffectdecay.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "shock.effect.decay")#
dev.off()#
############ EC#
# set.seed(1)#
# const <- 2 # constant needed to have a value of mean.y#
# x.full <- rep(NA, 500)#
# y.diff.full <- rep(NA, length(x.full))#
# y.full <- rep(NA, length(x.full))#
# y.full[1] <- 1#
# x.full[1] <- 15#
# y.diff.full[1] <- beta.lx/(-1 * phi)#
#
set.seed(1)#
x.error <- rnorm(500, 0, 2)#
x.full <- x.error#
y.error <- rnorm(500, 0, 2)#
y.full <- y.error#
y.diff.full <- rep(NA, length(y.full))#
phi <- -0.8 # coef on ldv#
beta.lx <- 1 # coef on l.x#
beta.diff.x <- -2 # coef on x#
for(i in 2:length(x.full)) {#
	x.full[i] <- x.full[i - 1] + x.error[i]#
	y.diff.full[i] <- phi*y.full[i - 1] + beta.diff.x*(x.full[i] - x.full[i - 1]) + beta.lx*x.full[i - 1] + y.error[i] # rnorm(1, 0, 1) + const*rnorm(1, 1, 0.25) +#
	y.full[i] <- y.full[i - 1] + y.diff.full[i]#
}#
#
# Trim the burn in#
x <- x.full[101:500]#
y.diff <- y.diff.full[101:500]#
y <- y.full[101:500]#
#
par(mfrow = c(2, 2))#
plot(y.diff)#
plot(y)#
plot(x)#
dev.off()#
#
set.seed(1)#
model.ec <- dynardl(y ~ x, lags = list("x" = c(1)), diffs = c("x"), #
	simulate = TRUE, fullsims = TRUE, #
	shockvar = "x",#
	sims = 10000, range = 20,#
	ec = TRUE)#
summary(model.ec)#
#
dynardl.all.plots(model.ec, bw = TRUE, tol = 0.05)#
dev.off()#
#
beta.lx/(-1 * phi)#
#
### What follows are 14 plots: dynardl.all.plots, then the six separately, as .pdf and .png#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/ecallplots.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.all.plots(model.ec, bw = TRUE)#
dev.off()#
#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/eclevelofy.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "levels")#
dev.off()#
#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/ecchangeofy.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "diffs")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/eclevelfrommean.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "levels.from.mean")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/eccumchange.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "cumulative.diffs")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/eccumabschange.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "cumulative.abs.diffs")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/ecshockeffectdecay.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "shock.effect.decay")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/ecallplots.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.all.plots(model.ec, bw = TRUE)#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/eclevelofy.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "levels")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/ecchangeofy.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "diffs")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/eclevelfrommean.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "levels.from.mean")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/eccumchange.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "cumulative.diffs")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/eccumabschange.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "cumulative.abs.diffs")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/ecshockeffectdecay.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "shock.effect.decay")#
dev.off()#
### Another 12 plots, this time pairing the types together (of the six) for the levels/ec models (pdf/png)#
#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twolevels.pdf", #
	width = 7, height = 5)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "levels", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "levels", main = "Y in Differences")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twochanges.pdf", #
	width = 7, height = 5)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "diffs", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "diffs", main = "Y in Differences")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twofrommeans.pdf", #
	width = 7, height = 5)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "levels.from.mean", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "levels.from.mean", main = "Y in Differences")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twocumchanges.pdf", #
	width = 7, height = 5)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.diffs", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "cumulative.diffs", main = "Y in Differences")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twocumabschanges.pdf", #
	width = 7, height = 5)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.abs.diffs", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "cumulative.abs.diffs", main = "Y in Differences")#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twoshockeffectdecays.pdf", #
	width = 7, height = 5)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "shock.effect.decay", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "shock.effect.decay", main = "Y in Differences")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twolevels.png", #
	width = 672, height = 480)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "levels", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "levels", main = "Y in Differences")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twochanges.png", #
	width = 672, height = 480)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "diffs", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "diffs", main = "Y in Differences")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twofrommeans.png", #
	width = 672, height = 480)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "levels.from.mean", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "levels.from.mean", main = "Y in Differences")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twocumchanges.png", #
	width = 672, height = 480)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.diffs", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "cumulative.diffs", main = "Y in Differences")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twocumabschanges.png", #
	width = 672, height = 480)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.abs.diffs", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "cumulative.abs.diffs", main = "Y in Differences")#
dev.off()#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/twoshockeffectdecays.png", #
	width = 672, height = 480)#
par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.simulation.plot(model, bw = TRUE, response = "shock.effect.decay", main = "Y in Levels")#
dynardl.simulation.plot(model.ec, bw = TRUE, response = "shock.effect.decay", main = "Y in Differences")#
dev.off()#
####### REPLICATION#
library(readstata13)#
#
data <- read.dta13("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/PardosSagarzazu_JOP.dta")#
quantile(data$econcurrent_agr, c(0.95), na.rm = T) - #
quantile(data$econcurrent_agr, c(0.05), na.rm = T)#
quantile(data$media, c(0.95), na.rm = T) - #
quantile(data$media, c(0.05), na.rm = T)#
set.seed(09262019)#
model.govtattn <- dynardl(gov_saliency ~ unemp + gdp_growth + mip_imputed + econcurrent_agr + opp_mainparty + media + timereal,#
	levels = c("unemp", "gdp_growth", "mip_imputed", "econcurrent_agr", "opp_mainparty", "media", "timereal"),#
	lags = list("gov_saliency" = 1, "unemp" = 1, "gdp_growth" = 1, "mip_imputed" = 1, #
		"econcurrent_agr" = 1, "opp_mainparty" = 1, "media" = 1),#
	data = data, simulate = TRUE, fullsims = TRUE, shockvar = "econcurrent_agr", sims = 10000, shockval = 1.26, burnin = 100 # This is moving from 5% to 95%, illustrative#
)#
model.oppattn <- dynardl(opp_mainparty ~ unemp + gdp_growth + mip_imputed + econcurrent_agr + gov_saliency + media + timereal,#
	levels = c("unemp", "gdp_growth", "mip_imputed", "econcurrent_agr", "gov_saliency", "media", "timereal"),#
	lags = list("gov_saliency" = 1, "unemp" = 1, "gdp_growth" = 1, "mip_imputed" = 1, #
		"econcurrent_agr" = 1, "opp_mainparty" = 1, "media" = 1),#
	data = data, simulate = TRUE, fullsims = TRUE, shockvar = "media", sims = 10000, shockval = 0.058, burnin = 100#
)#
govtattn.tab <- data.frame(matrix(rep(NA, length(summary(model.govtattn$model)$coefficients[,1]) * 4), ncol = 4))#
for(i in 1:length(summary(model.govtattn$model)$coefficients[,1])) {#
	govtattn.tab[((i)*2 - 1), 1] <- rownames(summary(model.govtattn$model)$coefficients)[i]#
	govtattn.tab[((i)*2 - 1), 2] <- round(summary(model.govtattn$model)$coefficients[i,1], digits = 3)#
	govtattn.tab[((i)*2), 2] <- paste0("(", round(summary(model.govtattn$model)$coefficients[i,2], digits = 3), ")")	#
	govtattn.tab[((i)*2 - 1), 3] <- rownames(summary(model.oppattn$model)$coefficients)[i]#
	govtattn.tab[((i)*2 - 1), 4] <- round(summary(model.oppattn$model)$coefficients[i,1], digits = 3)#
	govtattn.tab[((i)*2), 4] <- paste0("(", round(summary(model.oppattn$model)$coefficients[i,2], digits = 3), ")")	#
#
}#
#
quantile(data$media, c(0.05, 0.95), na.rm = T)#
#
0.067405726 - .009892589 #
dynardl.all.plots(model.govtattn, bw = TRUE)#
dynardl.all.plots(model.oppattn, bw = TRUE)#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/psgovtallplots.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.all.plots(model.govtattn, bw = TRUE)#
dev.off()#
#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/psgovtallplots.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.all.plots(model.govtattn, bw = TRUE)#
dev.off()#
pdf("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/psoppallplots.pdf", #
	width = 7, height = 5)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.all.plots(model.oppattn, bw = TRUE)#
dev.off()#
#
png("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/Dynamic TS Effects and QOI/Illustrative QOI Manuscript text/Plots/psoppallplots.png", #
	width = 672, height = 480)#
par(mar = c(4.1, 4.1, 1.1, 1.1))#
dynardl.all.plots(model.oppattn, bw = TRUE, tol = 0.01)#
dev.off()
beta.x <- 2 # coef on x#
beta.lx <- -3 # coef on l.x#
phi <- 0.5 # coef on ldv#
const <- 2.5 # constant needed to have a value of mean.y#
mean.y <- const/(1-phi) # steady-state of Y#
#
set.seed(100)#
x.full <- rnorm(500)#
y.full <- rep(NA, length(x.full))#
#
y.full[1] <- const/1-phi#
#
for(i in 2:length(x.full)) {#
#	y.full[i] <- const*rnorm(1, 1, 0.05) + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, 0.05)#
  y.full[i] <- const + phi*y.full[i - 1] + beta.x*x.full[i] + beta.lx*x.full[i - 1] + rnorm(1, 0, .5)#
}#
#
# Trim the burn in#
x <- x.full[101:500]#
y <- y.full[101:500]#
#
par(mfrow = c(2, 1))#
plot(y)#
plot(x)#
dev.off()#
#
set.seed(1)#
model <- dynardl(y ~ x, lags = list("x" = c(1)), levels = c("x"), #
	simulate = TRUE, fullsims = TRUE, #
	shockvar = "x",#
	sims = 10000, range = 20,#
	ec = FALSE)#
summary(model)
start.period <- 1#
is.changing <- 15#
x <- model#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
				d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.diffs")
i <- 11
mean(diff.sims[,i]) > 0)
mean(diff.sims[,i]) > 0
(quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))
quantile(diff.sims[,i], 0.025, na.rm = T)
temp.ul95
quantile(diff.sims[,i], 0.975, na.rm = T)
temp.ll95[i-1]
temp.ll95
i <- 10
(quantile(diff.sims[,i], 0.025, na.rm = T))
i
(quantile(diff.sims[,i], 0.975, na.rm = T))
start.period <- 1#
is.changing <- 15#
x <- model#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
				d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
				d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "within.period"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
				d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
				d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
temp.ll95
start.period <- 1#
is.changing <- 15#
x <- res4.neg#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
				d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
start.period <- 1#
is.changing <- 15#
x <- model#
#
bw <- TRUE#
xlab <- ylab <- ""#
abs.errors <- "cumulate"#
#
a <- x$rawsims[,start.period:ncol(x$rawsims)]#
		# Here, diffs sims is going to be 2:length of simulation, with the first period NA. This is to sync it with the d.central output#
		diff.sims <- matrix(rep(NA, nrow(a)*(ncol(a) - 1)), nrow = nrow(a)) # Last column is central tendency#
		# Track the differences for each simulation#
		for(i in 2:ncol(diff.sims)) {#
			diff.sims[,i] <- a[,i] - a[,(i - 1)]#
		}#
		is.changing.test <- is.changing#
		if(identical(is.changing, NULL)) {#
			is.changing.test <- 1#
		}		#
		temp.ll95 <- temp.ll90 <- temp.ll75 <- temp.ul75 <- temp.ul90 <- temp.ul95 <- temp.central <- rep(NA, ncol(diff.sims))#
		d.ll95 <- d.ul95 <- d.ll90 <- d.ul90 <- d.ll75 <- d.ul75 <- d.central <- rep(NA, ncol(diff.sims))		#
		for(i in 2:ncol(diff.sims)) {#
			if((i + start.period - 1) < x$simulation$shocktime[1]) { # If it's in the equilibriating period before the shock#
				temp.ll95[i] <- quantile(diff.sims[,i], 0.025, na.rm = T) # Preserve the regular diffs, NOT absolute, since, they're noise#
				temp.ll90[i] <- quantile(diff.sims[,i], 0.050, na.rm = T)#
				temp.ll75[i] <- quantile(diff.sims[,i], 0.125, na.rm = T)#
				temp.ul75[i] <- quantile(diff.sims[,i], 0.875, na.rm = T)#
				temp.ul90[i] <- quantile(diff.sims[,i], 0.950, na.rm = T)#
				temp.ul95[i] <- quantile(diff.sims[,i], 0.975, na.rm = T)#
				temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
				d.central[i] <- sum(temp.central[1:i], na.rm = T)#
			} else {#
				if((is.changing.test - start.period + 1) >= i) { # if it is moving#
					if(mean(diff.sims[,i]) > 0) { # if the movement is positive#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T), mean(diff.sims[,i], na.rm = T))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T))#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T))#
						} else { # if it's none or within, do the same for the plot scale#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.025, na.rm = T))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.050, na.rm = T))#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.125, na.rm = T))#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.875, na.rm = T) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.950, na.rm = T) - temp.central[i])#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.975, na.rm = T) - temp.central[i])#
						}#
					} else { # if the movement is negative#
						temp.central[i] <- ifelse(identical(x$rawsims$central[1], "median"), median(diff.sims[,i], na.rm = T)*(-1), mean(diff.sims[,i], na.rm = T)*(-1))#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
						if(abs.errors == "cumulate") {#
							temp.ul95[i] <- temp.ul95[i-1] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1))#
							temp.ul90[i] <- temp.ul90[i-1] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1))#
							temp.ul75[i] <- temp.ul75[i-1] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1))#
							temp.ll75[i] <- temp.ll75[i-1] + (quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- temp.ll90[i-1] + (quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- temp.ll95[i-1] + (quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						} else { # if it's none or within, do the same for the plot scale						#
							temp.ul95[i] <- d.central[i] + (quantile(diff.sims[,i], 0.025, na.rm = T)*(-1) - temp.central[i])#
							temp.ul90[i] <- d.central[i] + (quantile(diff.sims[,i], 0.050, na.rm = T)*(-1) - temp.central[i])#
							temp.ul75[i] <- d.central[i] + (quantile(diff.sims[,i], 0.125, na.rm = T)*(-1) - temp.central[i])#
							temp.ll75[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.875, na.rm = T)*(-1))#
							temp.ll90[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.950, na.rm = T)*(-1))#
							temp.ll95[i] <- d.central[i] - abs(temp.central[i] - quantile(diff.sims[,i], 0.975, na.rm = T)*(-1))#
						}#
					}#
				} else { # if it's not moving, by tol or last.period#
						temp.ll95[i] <- temp.ll95[i - 1]#
						temp.ll90[i] <- temp.ll90[i - 1]#
						temp.ll75[i] <- temp.ll75[i - 1]#
						temp.ul75[i] <- temp.ul75[i - 1]#
						temp.ul90[i] <- temp.ul90[i - 1]#
						temp.ul95[i] <- temp.ul95[i - 1]#
						temp.central[i] <- 0#
						d.central[i] <- sum(temp.central[1:i], na.rm = T)#
					}#
				}#
			d.ll95[i] <- temp.ll95[i] #
			d.ll90[i] <- temp.ll90[i] #
			d.ll75[i] <- temp.ll75[i] #
			d.ul75[i] <- temp.ul75[i] #
			d.ul90[i] <- temp.ul90[i] #
			d.ul95[i] <- temp.ul95[i] #
		}#
		time <- seq(start.period, (ncol(diff.sims) + start.period - 1), 1)#
		plot(time, d.ll95, type = "n", ylim = c(min(d.ll95, na.rm = T), max(d.ul95, na.rm = T)), #
			ylab = ifelse(ylab == "", "Cumulative Change in Y Value", ylab), xlab = ifelse(xlab == "", "Time", xlab))#
		#if(type == "area") {#
			if(abs.errors != "none") { #
			polygon(c(time, rev(time)), c(d.ul95, rev(d.ll95)), col = ifelse(bw == FALSE, "skyblue1", "grey70"), border = NA) # 95#
			polygon(c(time, rev(time)), c(d.ul90, rev(d.ll90)), col = ifelse(bw == FALSE, "skyblue3", "grey50"), border = NA) # 90#
			polygon(c(time, rev(time)), c(d.ul75, rev(d.ll75)), col = "grey30", border = NA) # 75#
			# Actual response#
			}#
			lines(time, d.central, lty = 2, lwd = 3)
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.diffs")
dynardl.simulation.plot(model, bw = TRUE, response = "cumulative.diffs", start.period = 9)
?plt
plot
x <- rnorm(500)#
y <- rnorm(500)#
#
meowmeow <- function(x, y, ...) {#
	plot(x, y, ...)#
}#
plot(x, y)#
meowmeow(x, y)
dev.off()
plot(x, y)
meowmeow(x, y)
dev.off()
meowmeow(x, y, lwd = 10)
meowmeow <- function(x, y, ...) {#
	print(missing(lwd))#
	plot(x, y, ...)#
}
meowmeow(x, y, lwd = 10)
meowmeow <- function(x, y, ...) {#
	!is.null(lwd)#
	plot(x, y, ...)#
}
meowmeow(x, y, lwd = 10)
meowmeow <- function(x, y, ...) {#
	print(!is.null(lwd))#
	plot(x, y, ...)#
}
meowmeow(x, y, lwd = 10)
meowmeow <- function(x, y, ...) {#
	lwd <- lwd#
	print(!is.null(lwd))#
	plot(x, y, ...)#
}
meowmeow(x, y, lwd = 10)
plot
method(plot)
meow <- NULL
is.null(meow)
library(MASS)#
library(lmtest)
source("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/R/dynardl.R")
c(is.null(ylim), is.null(ylim))
ylim <- NULL
c(is.null(ylim), is.null(ylim))
source("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/R/dynardl.R")
library(testthat)
dyn.out.1.1 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 1, "incshare10" = 1, "urate" = 1), ec = TRUE,#
    simulate = FALSE)
library(MASS)#
library(lmtest)
load("~/Dropbox/Dynpss Project/R/dynamac/data/ineq.rda")
load("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/R/dynamac/data/ineq.rda")
dyn.out.1.1 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 1, "incshare10" = 1, "urate" = 1), ec = TRUE,#
    simulate = FALSE)
expect_output(dynardl.auto.correlated(dyn.out.1.1, digits = 3), paste(round(bgtest(dyn.out.1.1$model)$statistic, 3)))
expect_output(dynardl.auto.correlated(dyn.out.1.1, digits = 3, order = 5), paste(round(bgtest(dyn.out.1.1$model, order = 5)$statistic, 3)))
expect_output(dynardl.auto.correlated(dyn.out.1.1, digits = 3, bg.type = "F"), paste(round(bgtest(dyn.out.1.1$model, type = "F")$statistic, 3)))
expect_output(dynardl.auto.correlated(dyn.out.1.1, digits = 3), paste(round(bgtest(dyn.out.1.1$model)$statistic, 3)))
paste(round(bgtest(dyn.out.1.1$model)$statistic, 3))
dynardl.auto.correlated(dyn.out.1.1, digits = 3)
expect_output(dynardl.auto.correlated(dyn.out.1.1, digits = 3), paste(round(shapiro.test(dyn.out.1.1$model$residuals)$statistic, 3)))
paste(round(shapiro.test(dyn.out.1.1$model$residuals)$statistic, 3))
dynardl.auto.correlated(dyn.out.1.1, digits = 3)
dyn.out.1.1 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 1, "incshare10" = 1, "urate" = 1), ec = TRUE,#
    simulate = FALSE)#
  dyn.out.1.2 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 1, "incshare10" = 1, "urate" = 1), ec = TRUE,#
    simulate = FALSE, constant = FALSE)
dyn.out.1.2 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 1, "incshare10" = 1, "urate" = 1), ec = TRUE,#
    simulate = FALSE, constant = FALSE)
expect_equal(length(coef(dyn.out.2$model)), 3)
expect_equal(length(coef(dyn.out.1.2$model)), 3)
expect_equal(length(coef(dyn.out.1.1$model)), 4)
dyn.out.2.1 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 1, "incshare10" = 1, "urate" = 1), ec = TRUE,#
    simulate = FALSE, trend = TRUE)
expect_equal(("trendvar" %in% names(coefficients(dyn.out.2.1))), TRUE)
names(coefficients(dyn.out.2.1))
coefficients(dyn.out.2.1)
names(coefficients(dyn.out.2.1$model))
expect_equal(("trendvar" %in% names(coefficients(dyn.out.2.1$model))), TRUE)
dyn.out.8.3 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 1, "incshare10" = 1, "urate" = 1), ec = TRUE,#
    shockvar = "urate", simulate = FALSE, burnin = 20, range = 30, sig = 80, fullsims = FALSE)
expect_equal(ncol(dyn.out.8.2$rawsims), 20) # 20 time periods
dyn.out.8.2 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 1, "incshare10" = 1, "urate" = 1), ec = TRUE,#
    shockvar = "urate", simulate = TRUE, burnin = 20, fullsims = TRUE)
expect_equal(ncol(dyn.out.8.2$rawsims), 20) # 20 time periods
dyn.out.8.2$rawsims
expect_equal(ncol(dyn.out.8.2$rawsims), 21) # 20 time periods + central tendency
dyn.out.9.2 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("incshare10" = 1, "urate" = 1), ec = TRUE,#
    simulate = FALSE, noLDV = FALSE)
expect_equal(("l.1.concern" %in% names(coefficients(dyn.out.9.2))), TRUE)
names(coefficients(dyn.out.9.2))
names(coefficients(dyn.out.9.1))
dyn.out.9.1 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("incshare10" = 1, "urate" = 1), ec = TRUE,#
    simulate = FALSE, noLDV = TRUE)#
  dyn.out.9.2 <- dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("incshare10" = 1, "urate" = 1), ec = TRUE,#
    simulate = FALSE, noLDV = FALSE)
expect_equal(("l.1.concern" %in% names(coefficients(dyn.out.9.1$model))), FALSE)
expect_equal(("l.1.concern" %in% names(coefficients(dyn.out.9.2$model))), TRUE)
dynardl(concern ~ incshare10 + urate, data = ineq, #
    diffs = c("incshare10", "urate" = 1), ec = FALSE, noLDV = FALSE,#
    simulate = FALSE)
expect_warning(dynardl(concern ~ incshare10 + urate, data = ineq, #
    diffs = c("incshare10", "urate" = 1), ec = FALSE, noLDV = FALSE,#
    simulate = FALSE), "Lagged dependent variable added to model formula") # message: adding variable (no lags list)
dynardl(concern ~ incshare10 + urate, data = ineq, #
  lags = list("butts" = 1)#
    diffs = c("incshare10", "urate" = 1), ec = FALSE, noLDV = FALSE,#
    simulate = FALSE)
dynardl(concern ~ incshare10 + urate, data = ineq, #
  lags = list("butts" = 1),#
    diffs = c("incshare10", "urate" = 1), ec = FALSE, noLDV = FALSE,#
    simulate = FALSE)
dynardl(concern ~ incshare10 + urate, data = ineq, #
  lags = list("urate" = 1),#
    diffs = c("incshare10", "urate" = 1), ec = FALSE, noLDV = FALSE,#
    simulate = FALSE)
dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("incshare10" = 1, "urate" = 1), ec = TRUE, noLDV = FALSE,#
    simulate = FALSE)
dynardl(concern ~ incshare10 + urate, data = ineq, #
  lags = list("urate" = 1),#
    diffs = c("incshare10", "urate" = 1), ec = FALSE, noLDV = FALSE,#
    simulate = FALSE)
dynardl(concern ~ incshare10 + urate, data = ineq, #
  lags = list("urate" = 1),#
    diffs = c("incshare10", "urate"), ec = FALSE, noLDV = FALSE,#
    simulate = FALSE)
dynardl(concern ~ incshare10 + urate, data = ineq, #
    diffs = c("incshare10", "urate"), ec = FALSE, noLDV = FALSE,#
    simulate = FALSE)
dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 2, "incshare10" = 1, "urate" = 1), ec = TRUE, noLDV = FALSE,#
    simulate = FALSE)
library(dynamac)
dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 2, "incshare10" = 1, "urate" = 1), ec = TRUE, noLDV = FALSE,#
    simulate = FALSE)
rm(list = lis())
rm(list = ls())
source("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/R/dynardl.R")
load("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/R/dynamac/data/ineq.rda")#
# load("/Users/scj0014/Myfiles/Dropbox/Dynpss Project/R/dynamac/data/supreme.sup.rda")
dynardl(concern ~ incshare10 + urate, data = ineq, #
    lags = list("concern" = 2, "incshare10" = 1, "urate" = 1), ec = TRUE, noLDV = FALSE,#
    simulate = FALSE)
